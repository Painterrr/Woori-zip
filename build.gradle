buildscript {
	ext {
		protobufVersion = '3.23.4'
		protobufPluginVersion = '0.8.18'
		grpcVersion = '1.58.0'
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.10'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'com.google.protobuf' version "${protobufPluginVersion}"
}

group = 'waf.fisa'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'

	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	implementation "io.grpc:grpc-protobuf:${grpcVersion}"
	implementation "io.grpc:grpc-stub:${grpcVersion}"
	implementation 'net.devh:grpc-server-spring-boot-starter:2.15.0.RELEASE'
	compileOnly 'jakarta.annotation:jakarta.annotation-api:1.3.5'
	runtimeOnly 'com.mysql:mysql-connector-j'

	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	implementation 'net.logstash.logback:logstash-logback-encoder:7.2'
}

// Querydsl 설정부
def querydslDir = "./src/main/generated/querydsl"

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
	options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
	main.java.srcDirs += [querydslDir]
	main {
		java {
			srcDirs += [ 'src/generated/main/grpc', 'src/generated/main/java' ]
		}
	}
}

// gradle clean 시에 QClass 디렉토리 삭제
clean.doLast {
	file(querydslDir).deleteDir()
}

tasks.named('bootBuildImage') {
	builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
	useJUnitPlatform()
}

// grpc
protobuf {
	protoc {
		artifact = "com.google.protobuf:protoc:${protobufVersion}"
	}
	generatedFilesBaseDir = "$projectDir/src/generated"
	clean {
		delete generatedFilesBaseDir
	}
	plugins {
		grpc {
			artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
		}
	}
	generateProtoTasks {
		all()*.plugins {
			grpc {}
		}
	}
}

bootJar {
	archiveFileName = "app.jar"
	destinationDirectory = file("./")
}